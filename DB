GO
CREATE PROCEDURE createAllTables
AS

    
    CREATE TABLE Customer_profile (
        nationalID INT PRIMARY KEY,
        first_name VARCHAR(50),
        last_name VARCHAR(50),
        email VARCHAR(50),
        address VARCHAR(50),
        date_of_birth DATE
    );

   CREATE TABLE Subscription (
    mobileNo CHAR(11),
    planID INT,
    subscription_date DATE,
    status VARCHAR(50) CHECK (status IN ('active', 'onhold')),
    PRIMARY KEY (mobileNo, planID),
    FOREIGN KEY (mobileNo) REFERENCES Customer_Account(mobileNo),
    FOREIGN KEY (planID) REFERENCES Service_Plan(planID)
);


    
    CREATE TABLE Service_Plan (
        planID INT PRIMARY KEY,
        SMS_offered INT,
        minutes_offered INT,
        data_offered INT,
        name VARCHAR(50),
        price INT,
        description VARCHAR(50)
    );
   CREATE TABLE Subscription (
    mobileNo CHAR(11),
    planID INT,
    subscription_date DATE,
    status VARCHAR(50) CHECK (status IN ('active', 'onhold')),
    PRIMARY KEY (mobileNo, planID),
    FOREIGN KEY (mobileNo) REFERENCES Customer_Account(mobileNo),
    FOREIGN KEY (planID) REFERENCES Service_Plan(planID)
);


    
    CREATE TABLE Plan_Usage (
        usageID INT PRIMARY KEY,
        start_date DATE,
        end_date DATE,
        data_consumption INT,
        minutes_used INT,
        SMS_sent INT,
        mobileNo CHAR(11),
        planID INT,
        FOREIGN KEY (mobileNo) REFERENCES Customer_Account(mobileNo),
        FOREIGN KEY (planID) REFERENCES Service_Plan(planID)
    );

  CREATE TABLE Payment (
    paymentID INT IDENTITY(1,1) PRIMARY KEY,
    amount DECIMAL(10, 1),
    date_of_payment DATE,
    payment_method VARCHAR(50) CHECK (payment_method IN ('cash', 'credit')),
    status VARCHAR(50) CHECK (status IN ('successful', 'pending', 'rejected')),
    mobileNo CHAR(11),
    FOREIGN KEY (mobileNo) REFERENCES Customer_Account(mobileNo)
);


    
    CREATE TABLE Process_Payment (
        paymentID INT PRIMARY KEY,
        planID INT,
        remaining_balance DECIMAL(10, 1),
        extra_amount DECIMAL(10, 1),
        FOREIGN KEY (paymentID) REFERENCES Payment(paymentID),
        FOREIGN KEY (planID) REFERENCES Service_Plan(planID)
    );

    
    CREATE TABLE  Wallet (
        walletID INT PRIMARY KEY,
        current_balance DECIMAL(10, 2),
        currency VARCHAR(50),
        last_modified_date DATE,
        nationalID INT,
        mobileNo CHAR(11),
        FOREIGN KEY (nationalID) REFERENCES Customer_profile(nationalID),
    
    );

    CREATE TABLE Transfer_money (
        walletID1 INT,
        walletID2 INT,
        transfer_id INT ,
        amount DECIMAL(10, 2),
        transfer_date DATE,
        PRIMARY KEY(walletID1,walletID2,transfer_id),
        FOREIGN KEY (walletID1) REFERENCES Wallet(walletID),
        FOREIGN KEY (walletID2) REFERENCES Wallet(walletID)
    );

    
    CREATE TABLE  Benefits (
        benefitID INT PRIMARY KEY,
        description VARCHAR(50),
        validity_date DATE,
        status VARCHAR(50),
        mobileNo CHAR(11),
        FOREIGN KEY (mobileNo) REFERENCES Customer_Account(mobileNo)
    );

    
    CREATE TABLE  Points_Group (
        pointID INT ,
        benefitID INT,
        pointsAmount INT,
        PaymentID INT,
        PRIMARY KEY(pointID,benefitID),
        FOREIGN KEY (benefitID) REFERENCES Benefits(benefitID),
        FOREIGN KEY (PaymentID) REFERENCES Payment(paymentID)
    );

    
    CREATE TABLE  Exclusive_Offer (
        offerID INT ,
        benefitID INT,
        internet_offered INT,
        SMS_offered INT,
        minutes_offered INT,
        PRIMARY KEY(offerID,benefitID),
        FOREIGN KEY (benefitID) REFERENCES Benefits(benefitID)
    );

    
    CREATE TABLE  Cashback (
        CashbackID INT ,
        benefitID INT,
        walletID INT,
        amount DECIMAL(10, 2),
        credit_date DATE,
        PRIMARY KEY(CashbackID,benefitID),
        FOREIGN KEY (benefitID) REFERENCES Benefits(benefitID),
        FOREIGN KEY (walletID) REFERENCES Wallet(walletID)
    );

    
    CREATE TABLE  Plan_Provides_Benefits (
        benefitID INT,
        planID INT,
        PRIMARY KEY (benefitID, planID),
        FOREIGN KEY (benefitID) REFERENCES Benefits(benefitID),
        FOREIGN KEY (planID) REFERENCES Service_Plan(planID)
    );

    
    CREATE TABLE  Shop (
        shopID INT PRIMARY KEY,
        name VARCHAR(50),
        category VARCHAR(50)
    );

    
    CREATE TABLE  Physical_Shop (
        shopID INT,
        address VARCHAR(50),
        working_hours VARCHAR(50),
        PRIMARY KEY (shopID),
        FOREIGN KEY (shopID) REFERENCES Shop(shopID)
    );

    
    CREATE TABLE  E_shop (
        shopID INT PRIMARY KEY,
        URL VARCHAR(50),
        rating INT,
        FOREIGN KEY (shopID) REFERENCES Shop(shopID)
    );

    CREATE TABLE  Voucher (
        voucherID INT PRIMARY KEY,
        value INT,
        expiry_date DATE,
        points INT,
        mobileNo CHAR(11),
        shopID INT,
        redeem_date DATE,
        FOREIGN KEY (mobileNo) REFERENCES Customer_Account(mobileNo),
        FOREIGN KEY (shopID) REFERENCES Shop(shopID)
    );

   
    CREATE TABLE  Technical_Support_Ticket (
        ticketID INT IDENTITY(1,1) ,
        mobileNo CHAR(11) ,
        Issue_description VARCHAR(50),
        priority_level INT,
        status VARCHAR(50) CHECK (status IN ('Open', 'In Progress', 'Resolved')),
        PRIMARY KEY (ticketID, mobileNo),
        FOREIGN KEY (mobileNo) REFERENCES Customer_Account(mobileNo)
    );


    


GO
CREATE PROCEDURE dropAllTables
AS

    
    DROP TABLE IF EXISTS Transfer_money;
    DROP TABLE IF EXISTS Points_Group;
    DROP TABLE IF EXISTS Cashback;
    DROP TABLE IF EXISTS Exclusive_Offer;
    DROP TABLE IF EXISTS Plan_Provides_Benefits;
    DROP TABLE IF EXISTS Benefits;
    DROP TABLE IF EXISTS Technical_Support_Ticket;
    DROP TABLE IF EXISTS Voucher;
    DROP TABLE IF EXISTS Plan_Usage;
    DROP TABLE IF EXISTS Subscription;
    DROP TABLE IF EXISTS Payment;
    DROP TABLE IF EXISTS Process_Payment;
    DROP TABLE IF EXISTS Wallet;
    DROP TABLE IF EXISTS Customer_Account;
    DROP TABLE IF EXISTS Service_Plan;
    DROP TABLE IF EXISTS Customer_profile;
    DROP TABLE IF EXISTS E_shop;
    DROP TABLE IF EXISTS Physical_Shop;
    DROP TABLE IF EXISTS Shop;
   


--CREATE PROCEDURE dropAllProceduresFunctionsViews()
--BEGIN

--END


GO
CREATE PROCEDURE clearAllTables
AS
    
    TRUNCATE TABLE Transfer_money;
    TRUNCATE TABLE Points_Group;
    TRUNCATE TABLE Cashback;
    TRUNCATE TABLE Exclusive_Offer;
    TRUNCATE TABLE Plan_Provides_Benefits;
    TRUNCATE TABLE Benefits;
    TRUNCATE TABLE Technical_Support_Ticket;
    TRUNCATE TABLE Voucher;
    TRUNCATE TABLE Plan_Usage;
    TRUNCATE TABLE Subscription;
    TRUNCATE TABLE Process_Payment;
    TRUNCATE TABLE Payment;
    TRUNCATE TABLE Wallet;
    TRUNCATE TABLE Customer_Account;
    TRUNCATE TABLE Service_Plan;
    TRUNCATE TABLE Customer_profile;
    TRUNCATE TABLE E_shop;
    TRUNCATE TABLE Physical_Shop;
    TRUNCATE TABLE Shop;
